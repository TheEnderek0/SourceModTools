"Config"
	{
	// The main game folder. portal2/ for Portal 2, csgo/ for CSGO, etc.
	// This is relative to the config file.
	"gameinfo" "."


	// Automatically find and pack files in the map. 
	// If this is disabled, specifically-indicated files will still be 
	// added as well as their dependencies.
	// Default Value: "1"
	"auto_pack" "1"


	// Allow files in VPKs to be packed into the map. 
	// This is disabled by default since these are usually default files.
	// Default Value: "0"
	"pack_vpk" "1"


	// If set, copy all the packed resoures to this additional location.
	// You can also prefix this with a # character to only copy to this 
	// destination, not the BSP pakfile.
	// "pack_dump" ""


	// If set, strip the generated cubemap files from the BSP. This is necessary for 2013-branch
	// games to allow cubemaps to be built properly.
	// 
	// This is equivalent to adding 'materials/maps/.*/(c[0-9-]+_[0-9-]+_[0-9-]+|cubemapdefault)(\\.hdr)?\\.vtf' as a regex "pack_blocklist".
	// Default Value: "0"
	"pack_strip_cubemaps" "0"


	// Specify various tags to indicate what features this game branch includes. This is used
	// to accurately include resources for entities that have changed over time.
	"pack_tags"
		{
		"entropyzero2" "0"
		"episodic" "0"
		"hl1" "0"
		"hl2" "0"
		"mapbase" "0"
		"mesa" "0"
		"p2" "1"
		"tf2" "0"
		}


	// Allows forcing specific files or folders to be packed. Each key in this block can be
	// either a single file/folder, a glob-style pattern, or an arbitary regex:
	// 
	// * "path" "materials/models/props_expensive/"
	// * "path" "scripts/game_sounds_ui.txt"
	// * "glob" "*.nut"
	// * "regex" "materials/(metal|concrete)/(courtyard|lobby)/*+\.vmt"
	// 
	// This overrides the blocklist, and also specifications in searchpaths.
	"pack_allowlist"
		{
		"path" "materials/bee2/tile_noise.vtf"
		"path" "materials/bee2/tile_noise_2x1.vtf"
		}


	// Allows preventing specific files or folders from being packed. The format is the same as 
	// 'pack_allowlist'. Files generated by the postcompiler itself will always be packed. This will
	// be checked against files already present in the BSP, so things like cubemaps can be removed.
	"pack_blocklist"
		{
		}


	// Specify additional locations to search for files, or configure whether existing locations pack
	// or not. Each key-value pair defines a path, with the value either a folder path or a VPK 
	// filename relative to the game root. The key defines the behaviour:
	// * "prefix" "folder/" adds the path to the start, so it overrides all others.
	// * "path" "vpk_path.vpk" adds the path to the end, so it is checked last.
	// * "nopack" "folder/" prohibits files in this path from being packed, you'll need to use one of the others also to add the path.
	"searchpaths"
		{
		"nopack" "../../../PSC/game/PSC/"
		"nopack" "../../../p2ce/"
		"nopack" "|portal2|/portal2/"
		"path" "|portal2|/bee2"
		"path" "|portal2|/portal2_dlc2/"
		"path" "|portal2|/portal2_dlc1/"
		"path" "|portal2|/portal2/"
		}


	// Generate and pack game_sounds_manifest.txt, with all used soundscripts.     
	// This is needed to make packing soundscripts work for the Portal 2 
	// workshop.
	// Default Value: "0"
	"soundscript_manifest" "1"


	// If set to a path, generate and pack a particles manifest under this name.     
	// This is needed to make packing particles work. "<map name>" is replaced with the map name.
	// Depending on your game, these are some of the correct paths:
	// * particles/particles_manifest.txt
	// * maps/<map name>_particles.txt (TF2, Portal 2)
	// * particles/<map name>_manifest.txt (L4D2)
	// Default Value: ""
	"particles_manifest" ""


	// Set the path to StudioMDL so the compiler can generate props.
	// If blank these features are disabled.
	// This is relative to the game root.
	// Default Value: "bin/studiomdl.exe"
	"studiomdl" "../../../bin/win64/studiomdl.exe"


	// If set, models will be compiled as subfolders of this folder, instead of in a 
	// temporary directory.
	// Default Value: ""
	"modelcompile_dump" ""


	// Before L4D, entity I/O used ',' to seperate the different parts.
	// 
	// Later games used a special symbol to delimit the sections, allowing
	// commas to be used in outputs. The compiler will guess which to use
	// based on existing outputs in the map, but if this is incorrect 
	// (or if there aren't any in the map), use this to override.
	// "use_comma_sep" ""


	// Define where the QC files are for combinable static props.
	// This path is searched recursively. This defaults to 
	// the 'content/' folder, which is adjacent to the game root.
	// This is how Valve sets up their file structure.
	"propcombine_qc_folder"
		{
		"loc" "content/"
		}


	// If enabled, Crowbar will be used to decompile models which don't have
	// a QC in the provided QC folder.
	// Default Value: "1"
	"propcombine_crowbar" "1"


	// Cache location for models decompiled for combining.
	// Default Value: "|gameinfo_path|/decomp_cache/"
	"propcombine_cache" "|gameinfo_path|/decomp_cache/"


	// When propcombining, an attempt will be made to merge collision meshes.
	// 
	// If shrink wrapping a pair of meshes changes the volume less than this,
	// the combined version will be used. If negative, this will not be done.
	// Default Value: "-1.0"
	"propcombine_volume_tolerance" "-1.0"


	// If greater than zero, combine props at least this close together.
	// Default Value: "0"
	"propcombine_auto_range" "0"


	// The minimum number of props required before propcombine will
	// bother merging them. Should be greater than 1.
	// Default Value: "2"
	"propcombine_min_cluster" "2"


	// Models specified here will never be propcombined.
	// 
	// You can specify a full path, or one with * wildcards. Alternatively,
	// set 'no_propcombine' in the model $keyvalues.
	"propcombine_blacklist"
		{
		}


	// If set, force-pack the combined props.
	// Default Value: "1"
	"propcombine_pack" "1"


	// Add plugins to the post compiler. Each block is a package of plugins in some folder.
	// The name must be a Python identifier - the plugins are mounted at 
	// "hammeraddons.bsp_transforms.plugin.blockname.filename".
	// * "path" must be set to either a single Python file, or a folder of files.
	// * If "recurse" is set, subfolders are recursively loaded as packages.
	// The transforms folder inside the postcompiler folder is also always
	// loaded, under the name "builtin".
	"plugins"
		{
		}


	// Specify additional options specific to transforms. Each key here is the name of the 
	// transform, and the value is then decided by that transform.
	"transform_opts"
		{
		}
	}
